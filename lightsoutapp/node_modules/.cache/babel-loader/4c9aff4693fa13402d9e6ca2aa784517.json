{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\src\\\\Board.js\";\n\n/* \nIDEAS: \n1. Add on hover effects showing the change in the game state if you make that move\n2. On hover - Brighten edges\n\nNotes:\n1. Need to set the css grid to equal the numcols and num rows\n*/\nimport React, { Component } from \"react\";\nimport Cell from \"./Components/Cell\";\nimport './Board.css';\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  //WILL DEPRECATE\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      hasWon: false,\n      chanceLightStartsOn: 0.4,\n      board: [],\n      ncols: 4,\n      nrows: 4\n    };\n    _this.flipCellsAround = _this.flipCellsAround.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createBoard = _this.createBoard.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.gameClickHandler = _this.gameClickHandler.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.rowChange = _this.rowChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.colChange = _this.colChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit -- MY NOTE: At least one MUST be lit*/\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = [];\n      var newArr = []; // TODO: create array-of-arrays of true/false values\n\n      for (var i = 0; i < this.state.ncols; i++, newArr = []) {\n        for (var k = 0; k < this.state.nrows; k++) {\n          newArr.push(Math.random() < this.state.chanceLightStartsOn ? true : false);\n        }\n\n        board.push(newArr);\n      }\n\n      this.setState({\n        board: board\n      });\n    }\n  }, {\n    key: \"gameClickHandler\",\n    value: function gameClickHandler(event) {\n      event.preventDefault();\n      this.createBoard();\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      console.log(\"WE MADE IT HERE!\", coord);\n      var _this$state = this.state,\n          ncols = _this$state.ncols,\n          nrows = _this$state.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n      //THIS ALREADY WAS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n      // this.setState({board, hasWon});\n\n    }\n  }, {\n    key: \"rowChange\",\n    value: function rowChange(event) {\n      this.setState({\n        nrows: event.target.value\n      });\n    }\n  }, {\n    key: \"colChange\",\n    value: function colChange(event) {\n      this.setState({\n        ncols: event.target.value\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      var numRows = React.createElement(\"input\", {\n        onChange: this.rowChange,\n        placeholder: \"Enter Number of Rows\",\n        type: \"number\",\n        name: \"number of rows\",\n        value: this.state.nrows,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 122\n        },\n        __self: this\n      });\n      var numCols = React.createElement(\"input\", {\n        onChange: this.colChange,\n        placeholder: \"Enter Number of Columns\",\n        type: \"number\",\n        name: \"number of columns\",\n        value: this.state.ncols,\n        required: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123\n        },\n        __self: this\n      });\n      var button = React.createElement(\"button\", {\n        onClick: this.gameClickHandler,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"New Game\");\n      var form = React.createElement(\"form\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, numRows, numCols, React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }), button);\n\n      var test = function test() {\n        for (var i = 0; i < _this2.state.ncols; i++) {\n          return \"100px\";\n        }\n      };\n\n      console.log(test());\n      console.log(this.state.ncols);\n      l;\n      var cells = React.createElement(\"div\", {\n        className: \"boardGrid\",\n        style: {\n          gridTemplateColumns: this.state.ncols,\n          gridTemplateRows: this.state.nrows\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, this.state.board.map(function (arr, arrInd) {\n        return arr.map(function (elem, elemInd) {\n          return React.createElement(Cell, {\n            key: arrInd + \"-\" + elemInd,\n            isLit: elem,\n            flipCellsAroundMe: _this2.flipCellsAround,\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 132\n            },\n            __self: this\n          });\n        });\n      }));\n      return React.createElement(\"div\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }, form, cells); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nBoard.defaultProps = {\n  ncols: 3,\n  nrows: 3\n};\nexport default Board;\n/* My Notes:\n1. After each turn will need to run an algo to check the state of each cell, if any lit, not gameOver\n2. Each square has a on/off set to true/false\n3. Each square has a clickHandler (this should be the child component)\n4. When a square if clicked the on/off switch is toggled\n5. Toggling the switch toggles a className.\n\nBoard Size Creator:\n1. Have a double loop algo, first loop is number of rows, second loop is numbers of columns. etc.\n\nCalcing Neighboring Squares: \n0 0 0 0 \n0 0 0 0\n0 0 0 0\n\n1  2  3  4\n5  6  7  8\n9 10 11 12\n\nRules (Not Edge):\nn-1, n+1, n-(number columns), n+(number columns)\n\nRules Edge:\nn-1 || n+1, n-4, n+4\n\nRules Corner:\nDepends on corner, each corner has it's own set of rules. There are always 4 corners.\nFinding Corners:\nThe first is 1\nThe second is number columns\nThe third is (rows * columns) - rows +1 \nThe last is number rows * number columns\n\nChecking edge: \n1 is always an edge. \nN-columns therefore N is always edge\nN+1 is always edge or \nGeneral Rule:\nX%N === 0 or x%n === 1 is an edge.\n\nExample:\nClick x= 7\nPossible values\n6,8,3,11 \nCheck if edge:\n7%4 = 3 not edge, there fore toggle all.\n\nExample 2:\nClick x = 12\n12%4 = is edge\n\n\n*/","map":{"version":3,"sources":["C:/Users/DeHuff/Desktop/Coding/Modern React Bootcamp/12_LightsOut/lightsoutapp/src/Board.js"],"names":["React","Component","Cell","Board","props","state","hasWon","chanceLightStartsOn","board","ncols","nrows","flipCellsAround","bind","createBoard","gameClickHandler","rowChange","colChange","newArr","i","k","push","Math","random","setState","event","preventDefault","coord","console","log","split","map","Number","y","x","flipCell","target","value","numRows","numCols","button","form","test","l","cells","gridTemplateColumns","gridTemplateRows","arr","arrInd","elem","elemInd","defaultProps"],"mappings":"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","sourcesContent":["/* \nIDEAS: \n1. Add on hover effects showing the change in the game state if you make that move\n2. On hover - Brighten edges\n\nNotes:\n1. Need to set the css grid to equal the numcols and num rows\n*/\n\nimport React, {Component} from \"react\";\nimport Cell from \"./Components/Cell\";\nimport './Board.css';\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n  //WILL DEPRECATE\n  static defaultProps = {\n    ncols : 3,\n    nrows : 3,    \n   }\n  constructor(props) {\n    super(props);\n     // TODO: set initial state\n    this.state =  {\n      hasWon : false,\n      chanceLightStartsOn : 0.4,\n      board : [],\n      ncols : 4,\n      nrows : 4,\n    } \n    this.flipCellsAround = this.flipCellsAround.bind(this);\n    this.createBoard = this.createBoard.bind(this);\n    this.gameClickHandler = this.gameClickHandler.bind(this);\n    this.rowChange = this.rowChange.bind(this);\n    this.colChange = this.colChange.bind(this);\n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit -- MY NOTE: At least one MUST be lit*/\n\n  createBoard() {\n    let board = [];\n    let newArr = [];\n     // TODO: create array-of-arrays of true/false values\n    for(let i = 0; i < this.state.ncols; i++, newArr = []) {\n      for(let k = 0; k < this.state.nrows; k++) {\n        newArr.push(Math.random() < this.state.chanceLightStartsOn ? true : false);\n      }\n      board.push(newArr);\n    }\n    this.setState({ board : board })   \n  }\n  gameClickHandler(event) {\n    event.preventDefault()\n    this.createBoard();\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n  flipCellsAround(coord) {\n    console.log(\"WE MADE IT HERE!\" , coord);\n    let {ncols, nrows} = this.state;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }    \n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n\n    //THIS ALREADY WAS HERE!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!\n    // this.setState({board, hasWon});\n  }\n\n  rowChange(event) {\n    this.setState({\n      nrows : event.target.value,\n    });\n  }\n  colChange(event) {\n    this.setState({\n      ncols : event.target.value,\n    });\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {    \n    const numRows = <input onChange={this.rowChange} placeholder=\"Enter Number of Rows\" type=\"number\" name=\"number of rows\" value={this.state.nrows} required/>;\n    const numCols = <input onChange={this.colChange} placeholder=\"Enter Number of Columns\" type=\"number\" name=\"number of columns\" value={this.state.ncols} required/>;\n    const button = <button onClick={this.gameClickHandler}>New Game</button>;\n    const form = <form>{numRows}{numCols}<br />{button}</form>;\n    const test = () => { for(let i = 0; i < this.state.ncols; i++) {return \"100px\"}}\n    console.log(test());\n    console.log(this.state.ncols);l\n    const cells = <div className=\"boardGrid\" style={{gridTemplateColumns : this.state.ncols, gridTemplateRows : this.state.nrows}}>{\n                    this.state.board.map((arr, arrInd) => \n                        arr.map((elem, elemInd) => \n                          <Cell \n                            key={arrInd+\"-\"+elemInd} \n                            isLit={elem} \n                            flipCellsAroundMe={this.flipCellsAround}/>\n                          ))}\n                  </div>;\n    \n    return(\n      <div>      \n        {form}\n        {cells}\n      </div>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n\n\n\n\n/* My Notes:\n1. After each turn will need to run an algo to check the state of each cell, if any lit, not gameOver\n2. Each square has a on/off set to true/false\n3. Each square has a clickHandler (this should be the child component)\n4. When a square if clicked the on/off switch is toggled\n5. Toggling the switch toggles a className.\n\nBoard Size Creator:\n1. Have a double loop algo, first loop is number of rows, second loop is numbers of columns. etc.\n\nCalcing Neighboring Squares: \n0 0 0 0 \n0 0 0 0\n0 0 0 0\n\n1  2  3  4\n5  6  7  8\n9 10 11 12\n\nRules (Not Edge):\nn-1, n+1, n-(number columns), n+(number columns)\n\nRules Edge:\nn-1 || n+1, n-4, n+4\n\nRules Corner:\nDepends on corner, each corner has it's own set of rules. There are always 4 corners.\nFinding Corners:\nThe first is 1\nThe second is number columns\nThe third is (rows * columns) - rows +1 \nThe last is number rows * number columns\n\nChecking edge: \n1 is always an edge. \nN-columns therefore N is always edge\nN+1 is always edge or \nGeneral Rule:\nX%N === 0 or x%n === 1 is an edge.\n\nExample:\nClick x= 7\nPossible values\n6,8,3,11 \nCheck if edge:\n7%4 = 3 not edge, there fore toggle all.\n\nExample 2:\nClick x = 12\n12%4 = is edge\n\n\n*/"]},"metadata":{},"sourceType":"module"}