{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\DeHuff\\\\Desktop\\\\Coding\\\\Modern React Bootcamp\\\\12_LightsOut\\\\lightsoutapp\\\\src\\\\Board.js\";\nimport React, { Component } from \"react\";\nimport Cell from \"./Components/Cell\";\nimport './Board.css';\n/* My Notes:\n1. After each turn will need to run an algo to check the state of each cell, if any lit, not gameOver\n2. Each square has a on/off set to true/false\n3. Each square has a clickHandler (this should be the child component)\n4. When a square if clicked the on/off switch is toggled\n5. Toggling the switch toggles a className.\n\nBoard Size Creator:\n1. Have a double loop algo, first loop is number of rows, second loop is numbers of columns. etc.\n\nCalcing Neighboring Squares: \n0 0 0 0 \n0 0 0 0\n0 0 0 0\n\n1  2  3  4\n5  6  7  8\n9 10 11 12\n\nRules (Not Edge):\nn-1, n+1, n-(number columns), n+(number columns)\n\nRules Edge:\nn-1 || n+1, n-4, n+4\n\nRules Corner:\nDepends on corner, each corner has it's own set of rules. There are always 4 corners.\nFinding Corners:\nThe first is 1\nThe second is number columns\nThe third is (rows * columns) - rows +1 \nThe last is number rows * number columns\n\nChecking edge: \n1 is always an edge. \nN-columns therefore N is always edge\nN+1 is always edge or \nGeneral Rule:\nX%N === 0 or x%n === 1 is an edge.\n\nExample:\nClick x= 7\nPossible values\n6,8,3,11 \nCheck if edge:\n7%4 = 3 not edge, there fore toggle all.\n\nExample 2:\nClick x = 12\n12%4 = is edge\n\n\n*/\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nvar Board =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(Board, _Component);\n\n  function Board(props) {\n    var _this;\n\n    _classCallCheck(this, Board);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(Board).call(this, props)); // TODO: set initial state\n\n    _this.state = {\n      nrows: 4,\n      ncols: 4,\n      chanceLightStartsOn: 0.4\n    };\n    return _this;\n  }\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit -- At least one MUST be lit*/\n\n\n  _createClass(Board, [{\n    key: \"createBoard\",\n    value: function createBoard() {\n      var board = []; // TODO: create array-of-arrays of true/false values\n\n      return board;\n    }\n    /** handle changing a cell: update board & determine if winner */\n\n  }, {\n    key: \"flipCellsAround\",\n    value: function flipCellsAround(coord) {\n      var _this$props = this.props,\n          ncols = _this$props.ncols,\n          nrows = _this$props.nrows;\n      var board = this.state.board;\n\n      var _coord$split$map = coord.split(\"-\").map(Number),\n          _coord$split$map2 = _slicedToArray(_coord$split$map, 2),\n          y = _coord$split$map2[0],\n          x = _coord$split$map2[1];\n\n      function flipCell(y, x) {\n        // if this coord is actually on board, flip it\n        if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n          board[y][x] = !board[y][x];\n        }\n      } // TODO: flip this cell and the cells around it\n      // win when every cell is turned off\n      // TODO: determine is the game has been won\n\n\n      this.setState({\n        board: board,\n        hasWon: hasWon\n      });\n    }\n    /** Render game board or winning message. */\n\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"h1\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      }, \"Hello\"); // if the game is won, just show a winning msg & render nothing else\n      // TODO\n      // make table board\n      // TODO\n    }\n  }]);\n\n  return Board;\n}(Component);\n\nexport default Board;","map":{"version":3,"sources":["C:/Users/DeHuff/Desktop/Coding/Modern React Bootcamp/12_LightsOut/lightsoutapp/src/Board.js"],"names":["React","Component","Cell","Board","props","state","nrows","ncols","chanceLightStartsOn","board","coord","split","map","Number","y","x","flipCell","setState","hasWon"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAeC,SAAf,QAA+B,OAA/B;AACA,OAAOC,IAAP,MAAiB,mBAAjB;AACA,OAAO,aAAP;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAsDA;;;;;;;;;;;;;;;;;;;;;;;;;;IA0BMC,K;;;;;AAEJ,iBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,+EAAMA,KAAN,GADiB,CAEhB;;AACD,UAAKC,KAAL,GAAc;AACZC,MAAAA,KAAK,EAAG,CADI;AAEZC,MAAAA,KAAK,EAAG,CAFI;AAGZC,MAAAA,mBAAmB,EAAG;AAHV,KAAd;AAHiB;AASlB;AAED;;;;;kCAEc;AACZ,UAAIC,KAAK,GAAG,EAAZ,CADY,CAEZ;;AACA,aAAOA,KAAP;AACD;AAED;;;;oCAEgBC,K,EAAO;AAAA,wBACA,KAAKN,KADL;AAAA,UAChBG,KADgB,eAChBA,KADgB;AAAA,UACTD,KADS,eACTA,KADS;AAErB,UAAIG,KAAK,GAAG,KAAKJ,KAAL,CAAWI,KAAvB;;AAFqB,6BAGRC,KAAK,CAACC,KAAN,CAAY,GAAZ,EAAiBC,GAAjB,CAAqBC,MAArB,CAHQ;AAAA;AAAA,UAGhBC,CAHgB;AAAA,UAGbC,CAHa;;AAMrB,eAASC,QAAT,CAAkBF,CAAlB,EAAqBC,CAArB,EAAwB;AACtB;AAEA,YAAIA,CAAC,IAAI,CAAL,IAAUA,CAAC,GAAGR,KAAd,IAAuBO,CAAC,IAAI,CAA5B,IAAiCA,CAAC,GAAGR,KAAzC,EAAgD;AAC9CG,UAAAA,KAAK,CAACK,CAAD,CAAL,CAASC,CAAT,IAAc,CAACN,KAAK,CAACK,CAAD,CAAL,CAASC,CAAT,CAAf;AACD;AACF,OAZoB,CAcrB;AAEA;AACA;;;AAEA,WAAKE,QAAL,CAAc;AAACR,QAAAA,KAAK,EAALA,KAAD;AAAQS,QAAAA,MAAM,EAANA;AAAR,OAAd;AACD;AAGD;;;;6BAES;AACP,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iBADF,CADO,CAKP;AAEA;AAEA;AAEA;AACD;;;;EA5DiBjB,S;;AAgEpB,eAAeE,KAAf","sourcesContent":["import React, {Component} from \"react\";\nimport Cell from \"./Components/Cell\";\nimport './Board.css';\n/* My Notes:\n1. After each turn will need to run an algo to check the state of each cell, if any lit, not gameOver\n2. Each square has a on/off set to true/false\n3. Each square has a clickHandler (this should be the child component)\n4. When a square if clicked the on/off switch is toggled\n5. Toggling the switch toggles a className.\n\nBoard Size Creator:\n1. Have a double loop algo, first loop is number of rows, second loop is numbers of columns. etc.\n\nCalcing Neighboring Squares: \n0 0 0 0 \n0 0 0 0\n0 0 0 0\n\n1  2  3  4\n5  6  7  8\n9 10 11 12\n\nRules (Not Edge):\nn-1, n+1, n-(number columns), n+(number columns)\n\nRules Edge:\nn-1 || n+1, n-4, n+4\n\nRules Corner:\nDepends on corner, each corner has it's own set of rules. There are always 4 corners.\nFinding Corners:\nThe first is 1\nThe second is number columns\nThe third is (rows * columns) - rows +1 \nThe last is number rows * number columns\n\nChecking edge: \n1 is always an edge. \nN-columns therefore N is always edge\nN+1 is always edge or \nGeneral Rule:\nX%N === 0 or x%n === 1 is an edge.\n\nExample:\nClick x= 7\nPossible values\n6,8,3,11 \nCheck if edge:\n7%4 = 3 not edge, there fore toggle all.\n\nExample 2:\nClick x = 12\n12%4 = is edge\n\n\n*/\n\n/** Game board of Lights out.\n *\n * Properties:\n *\n * - nrows: number of rows of board\n * - ncols: number of cols of board\n * - chanceLightStartsOn: float, chance any cell is lit at start of game\n *\n * State:\n *\n * - hasWon: boolean, true when board is all off\n * - board: array-of-arrays of true/false\n *\n *    For this board:\n *       .  .  .\n *       O  O  .     (where . is off, and O is on)\n *       .  .  .\n *\n *    This would be: [[f, f, f], [t, t, f], [f, f, f]]\n *\n *  This should render an HTML table of individual <Cell /> components.\n *\n *  This doesn't handle any clicks --- clicks are on individual cells\n *\n **/\n\nclass Board extends Component {\n\n  constructor(props) {\n    super(props);\n     // TODO: set initial state\n    this.state =  {\n      nrows : 4,\n      ncols : 4,\n      chanceLightStartsOn : 0.4,\n\n    } \n  }\n\n  /** create a board nrows high/ncols wide, each cell randomly lit or unlit -- At least one MUST be lit*/\n\n  createBoard() {\n    let board = [];\n    // TODO: create array-of-arrays of true/false values\n    return board\n  }\n\n  /** handle changing a cell: update board & determine if winner */\n\n  flipCellsAround(coord) {\n    let {ncols, nrows} = this.props;\n    let board = this.state.board;\n    let [y, x] = coord.split(\"-\").map(Number);\n\n\n    function flipCell(y, x) {\n      // if this coord is actually on board, flip it\n\n      if (x >= 0 && x < ncols && y >= 0 && y < nrows) {\n        board[y][x] = !board[y][x];\n      }\n    }\n\n    // TODO: flip this cell and the cells around it\n\n    // win when every cell is turned off\n    // TODO: determine is the game has been won\n\n    this.setState({board, hasWon});\n  }\n\n\n  /** Render game board or winning message. */\n\n  render() {\n    return(\n      <h1>Hello</h1>\n    )\n\n    // if the game is won, just show a winning msg & render nothing else\n\n    // TODO\n\n    // make table board\n\n    // TODO\n  }\n}\n\n\nexport default Board;\n"]},"metadata":{},"sourceType":"module"}